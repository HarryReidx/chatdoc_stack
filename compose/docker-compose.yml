version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:5.7.44
    container_name: compose-mysql-1
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: gpt_qa
      MYSQL_USER: chatdoc
      MYSQL_PASSWORD: chatdoc123456
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/conf:/etc/mysql/conf.d
      - ../initialize/mysql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7.0.0
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # Elasticsearch集群
  es01:
    image: elasticsearch:8.12.0
    container_name: es01
    restart: always
    environment:
      - node.name=es01
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      timeout: 10s
      retries: 5

  es02:
    image: elasticsearch:8.12.0
    container_name: es02
    restart: always
    environment:
      - node.name=es02
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata02:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      timeout: 10s
      retries: 5

  es03:
    image: elasticsearch:8.12.0
    container_name: es03
    restart: always
    environment:
      - node.name=es03
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata03:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      timeout: 10s
      retries: 5

  # 自定义文档解析服务
  custom-parser:
    build: 
      context: ../custom-parser
      dockerfile: Dockerfile
    image: compose-custom-parser
    container_name: custom-parser
    restart: always
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - LOG_LEVEL=INFO
      - DEFAULT_PARSER=megaparse
      - MEGAPARSE_ENABLED=true
    volumes:
      - ../MegaParse/libs/megaparse:/MegaParse/libs/megaparse
      - ../MegaParse/libs/megaparse_sdk:/MegaParse/libs/megaparse_sdk
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/docs"]
      timeout: 30s
      retries: 5

  # 查询分析服务
  query-analysis:
    image: crpi-fzu683ul2d9e6wu3.cn-hangzhou.personal.cr.aliyuncs.com/intsig-chatdoc/query-analysis:open-v1.0.0
    container_name: query-analysis
    restart: always
    ports:
      - "30006:30006"

  # 后端服务
  backend:
    build:
      context: ../code/backend
      dockerfile: Dockerfile
    image: doc-be:1.0
    container_name: backend
    restart: always
    ports:
      - "48092:3000"
    volumes:
      - ../code/backend:/app
      - /app/node_modules
      - ./logs:/var/log/backend  # 添加日志挂载卷
    environment:
      - NODE_ENV=development
      - PROJECT_NAME=backend
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_DATABASE=gpt_qa
      - MYSQL_PASSWORD=root123456
      - REDIS_HOST=redis
      - REDIS_PORT=6379
#      - REDIS_PASSWORD=Pwd_250309
      - UPLOAD_ADDRESS=http://chatdoc-proxy:8000/upload/
      - DOWNLOAD_ADDRESS=http://chatdoc-proxy:8000/download/
      - BACKEND_URL=http://chatdoc:5000
      - BACKEND_NODE_URL=http://backend:3000
      - CHATDOC_PROXY_URL=http://chatdoc-proxy:8000
      - FRONT_END_URL=http://localhost:3001,http://localhost:48091,http://host.docker.internal:48091,http://frontend:3000
      - LOG_LEVEL=debug  # 启用调试日志
      - DEBUG_MODE=true  # 启用调试模式
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["yarn", "start:debug"]  # 使用调试模式启动

  # 前端服务
  frontend:
    build:
      context: ../code/frontend
      dockerfile: Dockerfile
      target: production
    image: doc-fe:1.0
    container_name: frontend
    restart: always
    ports:
      - "48091:3000"
    environment:
      - KB_API=http://host.docker.internal:48092
      - NODE_ENV=production

  # 文档问答服务
  chatdoc:
    build:
      context: ../code/chatdoc
      dockerfile: Dockerfile
    image: doc:1.0
    container_name: chatdoc
    restart: always
    ports:
      - "5000:5000"
    volumes:
      - chatdoc_data:/app/data
      - ../MegaParse:/MegaParse
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - ES_HOSTS=http://es01:9200|http://es02:9200|http://es03:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=Pwd_250309
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=root123456
      - MYSQL_DB=gpt_qa
      - BACKEND_URL=http://backend:3000
      - CUSTOM_PARSER_URL=http://custom-parser:8080
      - QUERY_ANALYSIS_URL=http://query-analysis:30006
      - PROXY_URL=http://chatdoc-proxy:8000
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy

  # 文档问答代理服务
  chatdoc-proxy:
    build: 
      context: ../code/chatdoc-proxy
      dockerfile: Dockerfile
    image: doc-proxy:1.0
    container_name: chatdoc-proxy
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - chatdoc_data:/app/data
    environment:
      - BACKEND_URL=http://chatdoc:5000
    depends_on:
      - chatdoc
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

volumes:
  mysql_data:
  redis_data:
  esdata01:
  esdata02:
  esdata03:
  chatdoc_data: